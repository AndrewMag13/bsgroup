'use client'

import { SubmitHandler, useForm } from 'react-hook-form'
import toast, { Toaster } from 'react-hot-toast'

import { ErrorMessage } from '@hookform/error-message'
import { GoogleSpreadsheet } from 'google-spreadsheet'
import { NextPage } from 'next'
import OtpravitButton from '@/shared/ui/otpravit/otpravit'
import { SHEETS_API } from '@/shared/constants/constants'
import { motion } from 'framer-motion'
import s from './applicationWidget.module.scss'
import { useTranslations } from 'next-intl'

// import { JWT } from 'google-auth-library'

interface Inputs {
  name: string
  phone: string
  email: string
}

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
// const serviceAccountAuth = new JWT({
//   // env var values here are copied from service account credentials generated by google
//   // see "Authentication" section in docs for more info
//   email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
//   key: process.env.GOOGLE_PRIVATE_KEY,
//   scopes: ['https://www.googleapis.com/auth/spreadsheets'],
// })
// export function getStaticProps() {
//   const serviceAccountAuth = new JWT({
//     // env var values here are copied from service account credentials generated by google
//     // see "Authentication" section in docs for more info
//     email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
//     key: process.env.GOOGLE_PRIVATE_KEY,
//     scopes: ['https://www.googleapis.com/auth/spreadsheets'],
//   })
//   const doc = new GoogleSpreadsheet(
//     '1K_GzkqAp08QRJ5j09B9fVWtXR4y2SicWVJejqqilcEk',
//     serviceAccountAuth,
//   )
// }
const ApplicationWidget: NextPage = async () => {
  const t = useTranslations('home.application')
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<Inputs>({ mode: 'onChange' })
  // const doc = new GoogleSpreadsheet(
  //   '1K_GzkqAp08QRJ5j09B9fVWtXR4y2SicWVJejqqilcEk',
  //   { apiKey: SHEETS_API! },
  // )
  // await doc.loadInfo()
  // console.log(doc.title)
  const onSubmit: SubmitHandler<Inputs> = (data) => {
    // fetch(
    //   `https://sheets.googleapis.com/v4/spreadsheets/1K_GzkqAp08QRJ5j09B9fVWtXR4y2SicWVJejqqilcEk?key=${SHEETS_API}`,
    //   {
    //     method: 'post',
    //     body: JSON.stringify(data),
    //   },
    // )
    // const d = Sheet()
    toast(t('done'), {
      duration: 2000,
      icon: 'üëè',
      style: {
        font: 'inter',
      },
    })
    reset()
  }

  return (
    <>
      <section className={s.container} id="application">
        <Toaster />
        <h2 className={s.title}>{t('title')}</h2>
        <motion.form
          noValidate
          initial={{
            opacity: 0,
            x: -100,
          }}
          whileInView={{
            opacity: 1,
            x: 0,
            transition: {
              duration: 1,
            },
          }}
          style={{
            zIndex: 10,
          }}
          viewport={{ once: true }}
          onSubmit={handleSubmit(onSubmit)}
        >
          <div className={s.forms}>
            <input
              placeholder={t('fields.name')}
              className={s.input}
              {...register('name', { required: true, maxLength: 32 })}
            ></input>
            <input
              placeholder={t('fields.phone')}
              className={s.input}
              {...register('phone', {
                required: true,
                maxLength: 50,
                pattern: {
                  value: /^[+]*[(]{0,1}[0-9]{1,3}[)]{0,1}[-\s\./0-9]{8,14}$/g,
                  message: t('phoneError'),
                },
              })}
              type="number"
            />
            <ErrorMessage
              errors={errors}
              name="phone"
              render={({ message }) => (
                <div className="self-center flex  justify-center align-bottom py-10">
                  <span className={'absolute mt-10'}>{message}</span>
                </div>
              )}
            />
            <input
              placeholder={t('fields.email')}
              className={s.input}
              {...register('email', {
                required: true,
                maxLength: 50,
                pattern: {
                  value:
                    /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
                  message: t('emailError'),
                },
              })}
              type="email"
            />
            <ErrorMessage
              errors={errors}
              name="email"
              render={({ message }) => (
                <div className="self-center flex  justify-center align-bottom py-10">
                  <span className={'absolute mt-10'}>{message}</span>
                </div>
              )}
            />
          </div>

          <div className={s.otpravit}>
            <OtpravitButton />
          </div>
        </motion.form>
      </section>
    </>
  )
}

export default ApplicationWidget
